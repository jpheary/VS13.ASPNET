@{
    ViewBag.Title = "About Invonto Test";
}
<h1>Task Summary:</h1>
<p>Create a simple web app for managing contacts. App should consist of following</p>
<ol>
    <li>
        1) Contact list screen in grid style with pagination. Contact list should include actions for add contact, edit contact, and delete contact.
    </li>
    <li>
        2) Add contact screen should have following fields o First Name * o Last Name * o Email * o Phone o Birthdate (with calendar picker) o Profile picture o List of groups (family, friend, colleague, and associate options – a contact can be part of multiple groups) o Comments (text area allowing up to 2000 characters)                  * required fields            Add contact screen should have Save and Cancel buttons. When user clicks on Save button, new contact record should be created and user should be redirected to the contact list screen. When user clicks on Cancel button, a confirmation dialog should be displayed with message “Are you sure you want to cancel?”. If user continues to cancel then contact record should be discarded and user should be redirected to the contact list screen.
        Try to use two column layout for this screen having two fields side by side.
    </li>
    <li>
        3) Edit contact will look the same as Add contact screen. Edit contact should allow updating contact details including group selection. Edit contact screen should have Save and Cancel buttons. When user clicks on Save button, contact record should be updated and user should be redirected to the contact list screen. When user clicks on Cancel button, a confirmation dialog should be displayed with message “Are you sure you want to cancel?”. If user continues to cancel then changes to the contact record should be discarded and user should be redirected to the contact list screen.
    </li>
    <li>
        4) When user clicks on Delete action from the contact list screen, a confirmation dialog should be displayed with message “Are you user you want to delete this contact?”. If user continues to delete then contact should be removed from database and contact list screen (try to prevent reloading of contact list screen when a contact is removed).
    </li>
</ol>
<h3>Technology stack to use:  </h3>
<p>
    ASP.NET (C#), MVC, Entity Framework, Angular.js, SQL Server, Bootstrap
    Note: Add Contact, Edit Contact, and Delete Contact must be built using AngularJs using AJAX to communicate with the MVC-Entity backend.
</p>
<h3>Database: </h3>
<p>
    You should be able to design database tables required for this test.
</p>
<h3>On completion: </h3>
<p>
    Make sure to test your code by creating and editing a few contacts. Email your source code and database to us in a zip file. Bonus points for making your code responsive.
</p>